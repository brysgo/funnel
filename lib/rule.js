// Generated by CoffeeScript 1.6.2
(function() {
  var Rule,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Rule = (function() {
    Rule.get = function(name) {
      return this.f._rules[name];
    };

    Rule.prototype.clear = function() {
      this._dependencies = void 0;
      this._passes = void 0;
      return this._bound = void 0;
    };

    function Rule(name, _fn) {
      this.name = name;
      this._fn = _fn;
      this.run = __bind(this.run, this);
      this.bind = __bind(this.bind, this);
      this.passes = __bind(this.passes, this);
      this.dependencies = __bind(this.dependencies, this);
    }

    Rule.prototype.dependencies = function() {
      var fnStr, p, params;

      if (this._dependencies == null) {
        fnStr = this._fn.toString();
        params = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')'));
        params = params.match(/([^\s,]+)/g);
        if (params) {
          this._dependencies = (function() {
            var _i, _len, _results;

            _results = [];
            for (_i = 0, _len = params.length; _i < _len; _i++) {
              p = params[_i];
              _results.push(this.constructor.get(p));
            }
            return _results;
          }).call(this);
        }
        if ((this._dependencies == null) || __indexOf.call(this._dependencies, void 0) >= 0) {
          this._dependencies = [];
        }
      }
      return this._dependencies;
    };

    Rule.prototype.passes = function(dependencies) {
      var d, dependency, _i, _j, _len, _len1, _ref;

      if (dependencies == null) {
        dependencies = void 0;
      }
      if (!this._passes) {
        this._passes = [];
        _ref = this.dependencies();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          d = _ref[_i];
          this._passes.push(d);
          this._passes.concat(d.passes());
        }
        this._passes.push(this);
      }
      if (dependencies == null) {
        return this._passes;
      }
      if (this._passes.length === 0) {
        return -1;
      }
      for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
        dependency = dependencies[_j];
        if (__indexOf.call(this._passes, dependency) < 0) {
          return -1;
        }
      }
      return this._passes.length;
    };

    Rule.prototype.bind = function(rule) {
      var _ref;

      if ((_ref = this._bound) == null) {
        this._bound = [];
      }
      return this._bound.push(rule);
    };

    Rule.prototype.run = function(args) {
      var context, d, i, name, results, x, _i, _len,
        _this = this;

      results = void 0;
      d = this.dependencies();
      if (args) {
        if (Object.prototype.toString.call(args) === '[object Array]') {
          results = {};
          for (i = _i = 0, _len = d.length; _i < _len; i = ++_i) {
            name = d[i];
            results[name] = args[i];
          }
        } else {
          results = args;
          args = (function() {
            var _j, _len1, _results;

            _results = [];
            for (_j = 0, _len1 = d.length; _j < _len1; _j++) {
              x = d[_j];
              _results.push(args[x.name]);
            }
            return _results;
          })();
        }
      }
      context = {
        "return": function(val) {
          var results_, rule, _j, _len1, _ref, _ref1, _results;

          results_ = JSON.parse(JSON.stringify(results));
          results_[_this.name] = val;
          if ((_ref = _this._bound) == null) {
            _this._bound = [];
          }
          _ref1 = _this._bound;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            rule = _ref1[_j];
            _results.push(rule.run(results_));
          }
          return _results;
        }
      };
      return this._fn.apply(context, args);
    };

    return Rule;

  })();

  this.Rule = Rule;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Rule;
  }

}).call(this);
