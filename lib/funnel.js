// Generated by CoffeeScript 1.6.2
(function() {
  var Funnel,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Funnel = (function() {
    function Funnel(rules) {
      this.rules = rules;
      this.map = __bind(this.map, this);
      this.reduce = __bind(this.reduce, this);
      this.run_rule = __bind(this.run_rule, this);
      this.lca = __bind(this.lca, this);
      this.compile = __bind(this.compile, this);
      this.input = __bind(this.input, this);
      this.listen = __bind(this.listen, this);
      this.compile();
    }

    Funnel.prototype.listen = function(fn) {
      var key;

      key = "_" + (Object.keys(this.rules).length);
      this.rules.key = fn;
      return this.compile();
    };

    Funnel.prototype.input = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.map('input', args);
    };

    Funnel.prototype.compile = function() {
      var fn, name, _ref, _results,
        _this = this;

      this.lca_of_rule = {};
      _ref = this.rules;
      _results = [];
      for (name in _ref) {
        fn = _ref[name];
        this[name] = function() {
          var args;

          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return _this.run_rule(name, args);
        };
        _results.push(this.lca_of_rule[name] = this.lca.apply(this, this.arg_names(fn)));
      }
      return _results;
    };

    Funnel.prototype.arg_names = function(func) {
      var params, reg;

      reg = /\(([\s\S]*?)\)/;
      params = reg.exec(func);
      if (params) {
        return params[1].split(/\s*,\s*/);
      }
    };

    Funnel.prototype.lca = function() {
      var i, o, one, one_ancestors, one_tmp, rules, two, two_ancestors, two_tmp, _i, _len, _ref, _ref1;

      rules = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (rules.length > 2) {
        return this.lca(this.lca.apply(this, rules.slice(0, 2)), this.lca.apply(this, rules.slice(2)));
      } else if (rules.length === 1) {
        return rules[0];
      } else {
        one = rules[0], two = rules[1];
        one_ancestors = [];
        two_ancestors = [];
        one_tmp = [one];
        two_tmp = [two];
        while (true) {
          one_ancestors = one_ancestors.concat(one_tmp);
          two_ancestors = two_ancestors.concat(two_tmp);
          for (_i = 0, _len = one_ancestors.length; _i < _len; _i++) {
            o = one_ancestors[_i];
            if (__indexOf.call(two_ancestors, o) >= 0) {
              return o;
            }
          }
          one_tmp = (_ref = []).concat.apply(_ref, (function() {
            var _j, _len1, _results;

            _results = [];
            for (_j = 0, _len1 = one_tmp.length; _j < _len1; _j++) {
              i = one_tmp[_j];
              _results.push(this.arg_names(this.rules[i]));
            }
            return _results;
          }).call(this));
          two_tmp = (_ref1 = []).concat.apply(_ref1, (function() {
            var _j, _len1, _results;

            _results = [];
            for (_j = 0, _len1 = two_tmp.length; _j < _len1; _j++) {
              i = two_tmp[_j];
              _results.push(this.arg_names(this.rules[i]));
            }
            return _results;
          }).call(this));
          if (__indexOf.call(one_tmp, void 0) >= 0 && __indexOf.call(two_tmp, void 0) >= 0) {
            break;
          }
        }
      }
    };

    Funnel.prototype.run_rule = function(rule, args) {
      var result, _ref;

      if (Object.prototype.toString.call(args) !== '[object Array]') {
        args = [args];
      }
      result = (_ref = this.rules)[rule].apply(_ref, args);
      return this.map(rule, result);
    };

    Funnel.prototype.extend = function() {
      var k, o, objects, result, v, _i, _len, _ref, _ref1;

      objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      result = {};
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        o = objects[_i];
        for (k in o) {
          v = o[k];
          if ((_ref = result[k]) == null) {
            result[k] = [];
          }
          if (Object.prototype.toString.call(v) !== '[object Array]') {
            v = [v];
          }
          result[k] = (_ref1 = result[k]).concat.apply(_ref1, v);
        }
      }
      return result;
    };

    Funnel.prototype.reduce = function(rule, outputs) {
      var a, args, fn, i, n, o, _ref;

      _ref = this.rules;
      for (n in _ref) {
        fn = _ref[n];
        a = this.arg_names(fn);
        args = [];
        args.push.apply(args, (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = a.length; _i < _len; _i++) {
            i = a[_i];
            _results.push(outputs[i]);
          }
          return _results;
        })());
        if (a.length > 1 && this.lca_of_rule[n] === rule) {
          o = this.run_rule(n, args);
          outputs = this.extend(outputs, o);
        }
      }
      return outputs;
    };

    Funnel.prototype.map = function(rule, result) {
      var a, fn, n, o, output, r, _ref, _ref1;

      if (Object.prototype.toString.call(result) === '[object Array]') {
        return this.extend.apply(this, (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = result.length; _i < _len; _i++) {
            r = result[_i];
            _results.push(this.map(rule, r));
          }
          return _results;
        }).call(this));
      } else {
        output = {};
        _ref = this.rules;
        for (n in _ref) {
          fn = _ref[n];
          a = this.arg_names(fn);
          if (a.length === 1 && this.lca_of_rule[n] === rule) {
            o = this.run_rule(n, result);
            o[rule] = result;
            o = this.reduce(rule, o);
            output = this.extend(output, o);
          }
        }
        if ((_ref1 = output[rule]) == null) {
          output[rule] = result;
        }
        return output;
      }
    };

    return Funnel;

  })();

  module.exports = Funnel;

}).call(this);
