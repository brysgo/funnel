// Generated by CoffeeScript 1.6.2
(function() {
  var Funnel,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Funnel = (function() {
    var f;

    f = void 0;

    function Funnel(rules) {
      var fn, name, rule;

      if (rules == null) {
        rules = {};
      }
      this.listen = __bind(this.listen, this);
      this._rules = {};
      f = this;
      rules.input = function(arg) {
        return this["return"](arg);
      };
      for (name in rules) {
        fn = rules[name];
        rule = new this.Rule(name, fn);
        this[name] = function() {
          var args;

          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return rule.run(args);
        };
      }
      this.Rule.compile_all();
      return;
    }

    Funnel.prototype.listen = function(fn) {
      var key;

      key = "_" + (Object.keys(this._rules).length);
      new this.Rule(key, fn);
      return this.Rule.compile_all();
    };

    Funnel.prototype.Rule = (function() {
      _Class.get = function(name) {
        return f._rules[name];
      };

      _Class.on = function(dependencies, rule) {
        var d, dependency, min, n, _i, _len, _ref;

        _ref = [Infinity, void 0], min = _ref[0], d = _ref[1];
        for (_i = 0, _len = dependencies.length; _i < _len; _i++) {
          dependency = dependencies[_i];
          n = dependency.passes(dependencies);
          if (n > -1 && n < min) {
            min = n;
            d = dependency;
          }
        }
        if (min > -1 && min < Infinity) {
          return d.bind(rule);
        }
      };

      _Class.clear_all = function() {
        var name, rule, _ref, _results;

        _ref = f._rules;
        _results = [];
        for (name in _ref) {
          rule = _ref[name];
          rule._dependencies = void 0;
          rule._passes = void 0;
          _results.push(rule._bound = void 0);
        }
        return _results;
      };

      _Class.compile_all = function() {
        var name, rule, _ref, _results;

        this.clear_all();
        _ref = f._rules;
        _results = [];
        for (name in _ref) {
          rule = _ref[name];
          _results.push(this.on(rule.dependencies(), rule));
        }
        return _results;
      };

      function _Class(name, _fn) {
        this.name = name;
        this._fn = _fn;
        this.run = __bind(this.run, this);
        this.bind = __bind(this.bind, this);
        this.passes = __bind(this.passes, this);
        this.dependencies = __bind(this.dependencies, this);
        f._rules[this.name] = this;
      }

      _Class.prototype.dependencies = function() {
        var fnStr, p, params;

        if (this._dependencies == null) {
          fnStr = this._fn.toString();
          params = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')'));
          params = params.match(/([^\s,]+)/g);
          if (params) {
            this._dependencies = (function() {
              var _i, _len, _results;

              _results = [];
              for (_i = 0, _len = params.length; _i < _len; _i++) {
                p = params[_i];
                _results.push(this.constructor.get(p));
              }
              return _results;
            }).call(this);
          }
          if ((this._dependencies == null) || __indexOf.call(this._dependencies, void 0) >= 0) {
            this._dependencies = [];
          }
        }
        return this._dependencies;
      };

      _Class.prototype.passes = function(dependencies) {
        var d, dependency, _i, _j, _len, _len1, _ref;

        if (dependencies == null) {
          dependencies = void 0;
        }
        if (!this._passes) {
          this._passes = [];
          _ref = this.dependencies();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            d = _ref[_i];
            this._passes.push(d);
            this._passes.concat(d.passes());
          }
          this._passes.push(this);
        }
        if (dependencies == null) {
          return this._passes;
        }
        if (this._passes.length === 0) {
          return -1;
        }
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          dependency = dependencies[_j];
          if (__indexOf.call(this._passes, dependency) < 0) {
            return -1;
          }
        }
        return this._passes.length;
      };

      _Class.prototype.bind = function(rule) {
        var _ref;

        if ((_ref = this._bound) == null) {
          this._bound = [];
        }
        return this._bound.push(rule);
      };

      _Class.prototype.run = function(args) {
        var context, d, i, name, results, x, _i, _len,
          _this = this;

        results = void 0;
        d = this.dependencies();
        if (args) {
          if (Object.prototype.toString.call(args) === '[object Array]') {
            results = {};
            for (i = _i = 0, _len = d.length; _i < _len; i = ++_i) {
              name = d[i];
              results[name] = args[i];
            }
          } else {
            results = args;
            args = (function() {
              var _j, _len1, _results;

              _results = [];
              for (_j = 0, _len1 = d.length; _j < _len1; _j++) {
                x = d[_j];
                _results.push(args[x.name]);
              }
              return _results;
            })();
          }
        }
        context = {
          "return": function(val) {
            var results_, rule, _j, _len1, _ref, _ref1, _results;

            results_ = JSON.parse(JSON.stringify(results));
            results_[_this.name] = val;
            if ((_ref = _this._bound) == null) {
              _this._bound = [];
            }
            _ref1 = _this._bound;
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              rule = _ref1[_j];
              _results.push(rule.run(results_));
            }
            return _results;
          }
        };
        return this._fn.apply(context, args);
      };

      return _Class;

    })();

    return Funnel;

  }).call(this);

  Array.prototype.remove = function(object) {
    return this.splice(this.indexOf(object), 1);
  };

  Array.prototype.clone = function() {
    return this.slice(0);
  };

  this.Funnel = Funnel;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Funnel;
  }

}).call(this);
